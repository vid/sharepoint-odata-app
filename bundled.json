{
  "files": [
    {
      "path": "config/config.json",
      "source": "{\"entries\": [\"src/webparts/myApp/MyAppWebPart.ts\"]}"
    },
    {
      "path": "config/serve.json",
      "source": "{\"port\": 4321, \"https\": true, \"initialPage\": \"https://localhost:4321/temp/workbench.html\"}"
    },
    {
      "path": "config/write-manifests.json",
      "source": "{\"cdnBasePath\": \"https://<your-cdn-endpoint>\"}"
    },
    {
      "path": "src/webparts/myApp/MyAppWebPart.ts",
      "source": "import { Version } from '@microsoft/sp-core-library';\nimport { IPropertyPaneConfiguration, PropertyPaneTextField } from '@microsoft/sp-property-pane';\nimport { BaseClientSideWebPart } from '@microsoft/sp-webpart-base';\nimport * as React from 'react';\nimport * as ReactDom from 'react-dom';\nimport EntryForm from './components/EntryForm';\nimport SearchForm from './components/SearchForm';\nimport SearchResults from './components/SearchResults';\nimport { IMyAppProps } from './components/IMyAppProps';\nimport { fetchOpenSearchDescription, parseOpenSearchXML } from './utils/fetchOpenSearchDescription';\n\nexport interface IMyAppWebPartProps {\n  description: string;\n}\n\nexport default class MyAppWebPart extends BaseClientSideWebPart<IMyAppWebPartProps> {\n  public render(): void {\n    const element: React.ReactElement<IMyAppProps> = React.createElement(\n      EntryForm,\n      {\n        description: this.properties.description\n      }\n    );\n\n    ReactDom.render(element, this.domElement);\n  }\n\n  protected get dataVersion(): Version {\n    return Version.parse('1.0');\n  }\n\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\n    return {\n      pages: [\n        {\n          header: {\n            description: 'My SharePoint App'\n          },\n          groups: [\n            {\n              groupName: 'Settings',\n              groupFields: [\n                PropertyPaneTextField('description', {\n                  label: 'Description'\n                })\n              ]\n            }\n          ]\n        }\n      ]\n    };\n  }\n}\n"
    },
    {
      "path": "src/webparts/myApp/components/EntryForm.tsx",
      "source": "import * as React from 'react';\n\nexport interface IEntryFormProps {\n  description: string;\n}\n\nconst EntryForm: React.FunctionComponent<IEntryFormProps> = (props) => {\n  return (\n    <div>\n      <h2>Entry Form</h2>\n      <form>\n        <div>\n          <label htmlFor=\"entry\">Enter Data:</label>\n          <input type=\"text\" id=\"entry\" name=\"entry\" />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default EntryForm;\n"
    },
    {
      "path": "src/webparts/myApp/components/SearchForm.tsx",
      "source": "import * as React from 'react';\n\nexport interface ISearchFormProps {\n  onSearch: (query: string) => void;\n}\n\nconst SearchForm: React.FunctionComponent<ISearchFormProps> = (props) => {\n  const [query, setQuery] = React.useState('');\n\n  const handleSearch = (event: React.FormEvent) => {\n    event.preventDefault();\n    props.onSearch(query);\n  };\n\n  return (\n    <div>\n      <h2>Search Form</h2>\n      <form onSubmit={handleSearch}>\n        <div>\n          <label htmlFor=\"search\">Search:</label>\n          <input\n            type=\"text\"\n            id=\"search\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n          />\n        </div>\n        <button type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n};\n\nexport default SearchForm;\n"
    },
    {
      "path": "src/webparts/myApp/components/SearchResults.tsx",
      "source": "import * as React from 'react';\n\nexport interface ISearchResultsProps {\n  results: any[];\n}\n\nconst SearchResults: React.FunctionComponent<ISearchResultsProps> = (props) => {\n  return (\n    <div>\n      <h2>Search Results</h2>\n      <ul>\n        {props.results.map((result, index) => (\n          <li key={index}>{result}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default SearchResults;\n"
    },
    {
      "path": "src/webparts/myApp/components/IMyAppProps.ts",
      "source": "export interface IMyAppProps {\n  description: string;\n}\n"
    },
    {
      "path": "src/webparts/myApp/utils/fetchOpenSearchDescription.ts",
      "source": "import { SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';\n\nexport async function fetchOpenSearchDescription(url: string, spHttpClient: SPHttpClient): Promise<string> {\n  const response: SPHttpClientResponse = await spHttpClient.get(url, SPHttpClient.configurations.v1);\n  const xml: string = await response.text();\n  return xml;\n}\n\nexport function parseOpenSearchXML(xml: string): any {\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xml, 'text/xml');\n  const items = xmlDoc.getElementsByTagName('Url');\n  const fields: any[] = [];\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    fields.push({\n      type: item.getAttribute('type'),\n      template: item.getAttribute('template'),\n    });\n  }\n\n  return fields;\n}\n"
    },
    {
      "path": "src/webparts/myApp/tests/MyAppWebPart.test.ts",
      "source": "import { assert } from 'chai';\n\ndescribe('MyAppWebPart', () => {\n  it('should render without errors', () => {\n    assert.ok(true);\n  });\n});\n"
    },
    {
      "path": "src/webparts/myApp/tests/EntryForm.test.tsx",
      "source": "import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport EntryForm from '../components/EntryForm';\n\ndescribe('EntryForm', () => {\n  it('renders without crashing', () => {\n    const div = document.createElement('div');\n    ReactDOM.render(<EntryForm description=\"Test\" />, div);\n  });\n});\n"
    },
    {
      "path": "src/webparts/myApp/tests/SearchForm.test.tsx",
      "source": "import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport SearchForm from '../components/SearchForm';\n\ndescribe('SearchForm', () => {\n  it('renders without crashing', () => {\n    const div = document.createElement('div');\n    ReactDOM.render(<SearchForm onSearch={() => {}} />, div);\n  });\n});\n"
    },
    {
      "path": "src/webparts/myApp/tests/SearchResults.test.tsx",
      "source": "import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport SearchResults from '../components/SearchResults';\n\ndescribe('SearchResults', () => {\n  it('renders without crashing', () => {\n    const div = document.createElement('div');\n    ReactDOM.render(<SearchResults results={[]} />, div);\n  });\n});\n"
    },
    {
      "path": "package.json",
      "source": "{\"name\": \"my-sharepoint-app\",\"version\": \"0.0.1\",\"private\": true,\"main\": \"lib/index.js\",\"scripts\": {\"build\": \"gulp bundle\",\"clean\": \"gulp clean\",\"test\": \"gulp test\",\"serve\": \"gulp serve\"},\"dependencies\": {\"@microsoft/sp-core-library\": \"^1.12.1\",\"@microsoft/sp-property-pane\": \"^1.12.1\",\"@microsoft/sp-webpart-base\": \"^1.12.1\",\"@microsoft/sp-http\": \"^1.12.1\",\"react\": \"^16.8.5\",\"react-dom\": \"^16.8.5\"},\"devDependencies\": {\"@microsoft/sp-build-web\": \"^1.12.1\",\"@microsoft/sp-module-interfaces\": \"^1.12.1\",\"@microsoft/sp-tslint-rules\": \"^1.12.1\",\"@microsoft/sp-webpart-workbench\": \"^1.12.1\",\"gulp\": \"^4.0.2\",\"@types/react\": \"^16.8.5\",\"@types/react-dom\": \"^16.8.5\",\"@types/chai\": \"^4.1.7\",\"@types/mocha\": \"^5.2.6\",\"tslint\": \"^5.12.1\",\"typescript\": \"^3.3.1\"}}"
    },
    {
      "path": "tsconfig.json",
      "source": "{\"compilerOptions\": {\"target\": \"es5\",\"module\": \"commonjs\",\"lib\": [\"es5\",\"es6\",\"dom\"],\"outDir\": \"lib\",\"sourceMap\": true,\"declaration\": true,\"moduleResolution\": \"node\",\"noImplicitAny\": false,\"suppressImplicitAnyIndexErrors\": true,\"jsx\": \"react\",\"types\": [\"chai\", \"mocha\", \"node\"]},\"include\": [\"src/**/*.ts\", \"src/**/*.tsx\"]}"
    },
    {
      "path": ".yo-rc.json",
      "source": "{\"@microsoft/generator-sharepoint\": {\"isCreatingSolution\": true,\"environment\": \"spo\",\"version\": \"1.12.1\",\"libraryName\": \"my-sharepoint-app\",\"libraryId\": \"00000000-0000-0000-0000-000000000000\",\"packageManager\": \"npm\",\"isDomainIsolated\": false,\"componentType\": \"webpart\",\"framework\": \"react\",\"componentName\": \"MyApp\",\"componentDescription\": \"My SharePoint App\",\"skipFeatureDeployment\": true}}"
    },
    {
      "path": "azure-pipelines.yml",
      "source": "trigger:\n- main\n\npool:\n  vmImage: 'ubuntu-latest'\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '14.x'\n  displayName: 'Install Node.js'\n\n- script: |\n    npm install\n    npm install -g gulp\n  displayName: 'Install npm packages'\n\n- script: |\n    gulp clean\n    gulp bundle --ship\n    gulp package-solution --ship\n  displayName: 'Bundle and Package SPFx Solution'\n\n- task: PublishBuildArtifacts@1\n  inputs:\n    pathToPublish: 'sharepoint/solution'\n    artifactName: 'drop'\n  displayName: 'Publish Package'\n"
    },
    {
      "path": "azure-pipelines-release.yml",
      "source": "trigger:\n- main\n\npool:\n  vmImage: 'ubuntu-latest'\n\nvariables:\n  SPO_SITE_URL: 'https://yourtenant.sharepoint.com/sites/yoursite'\n  SPO_CLIENT_ID: 'your-client-id'\n  SPO_CLIENT_SECRET: 'your-client-secret'\n  SPO_TENANT: 'your-tenant.onmicrosoft.com'\n\nsteps:\n- task: UseNode@1\n  inputs:\n    version: '14.x'\n  displayName: 'Use Node.js'\n\n- script: |\n    npm install -g @pnp/office365-cli\n  displayName: 'Install Office 365 CLI'\n\n- script: |\n    o365 login --authType password --userName ${{ variables.SPO_USER }} --password ${{ variables.SPO_PASSWORD }}\n  displayName: 'Login to SharePoint Online'\n\n- script: |\n    o365 spo app add --filePath $(Build.ArtifactStagingDirectory)/drop/your-solution.sppkg --overwrite --appCatalogUrl ${{ variables.SPO_SITE_URL }}\n  displayName: 'Upload App to App Catalog'\n\n- script: |\n    o365 spo app deploy --name your-solution.sppkg --appCatalogUrl ${{ variables.SPO_SITE_URL }} --skipFeatureDeployment\n  displayName: 'Deploy App'\n"
    }
  ]
}
